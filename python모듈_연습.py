# -*- coding: utf-8 -*-
"""Python모듈 연습

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FGu1P0m-yIJ3o3LMxRgHg9aLZvyZVP7t
"""

def add(a, b):
  return a + b
def subtract (a, b):
  return a - b

PI = 3.14159

class Calculator:
  def multiply(self, a, b):
    return a * b

print(add(5, 4) * subtract(9, 5))

"""# 새 섹션"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile my_module.py
# 
# name = "Python 모듈 시스템"
# version = 3.10
# 
# def greet(person):
#   return f"안녕하세요, {person}님!"
#   #print(person)
# def add(a, b):
#   return a + b
# 
# class Calculator:
#   def __init__(self, name="기본 계산기"):
#     self.name = name
# 
#   def multiply(self, a, b):
#     return a * b
#   def divide(self, a, b):
#     if b == 0:
#       return "0으로 나눌 수 없습니다."
#     return a / b

"""# 새 섹션"""

import module.my_module as my_module

print(my_module.name)
print(my_module.version)

print(my_module.greet("로나")) #다른클래스에 있는 안녕하세요 ~ 님!
print(my_module.add(10, 20)) #더하기 a + b

calc = my_module.Calculator("내 계산기")
print(calc.name) # cal 함수에 있는 이름
print(calc.multiply(3,4)) # a *b
print(calc.divide(10, 2))

"""# 새 섹션"""

from module.my_module import  greet, Calculator

# 가져온 함수 직접 사용 (모듈 이름 없이)
print(greet("포로리"))
# 가져온 클래스 직접 사용
calc = Calculator("고오급 계산기")
print(calc.name)
print(calc.multiply(20,4)) # a * b

# 주의: version은 가져오지 않았으므로 사용 불가
# print(version)  # 오류 발생: NameError: name 'version' is not defined

"""# 새 섹션"""

import module.my_module as mm
# as mm / mm은 별칭설정

print(mm.name)
print(mm.add(58, 26))

# 특정 항목에 별칭 지정
from module.my_module import Calculator as Calc, greet as say_hello

my_cal = Calc("간단 계산기")
print(my_cal.name)
print(say_hello("이모탭"))

"""# 새 섹션"""

# 셀 5: 모든 항목 가져오기 (*는 주의해서 사용해야 함)
from module.my_module import *

#모든 항목을 직접 사용 가능
print(name)
print(version)
print(greet("임금"))
print(add(8,7))

calc = Calculator("별표 계산기")
print(calc.name)

"""# 새 섹션"""

# !mkdir -p my_package
# !touch my_package/__init__.py

"""# 새 섹션"""

# Commented out IPython magic to ensure Python compatibility.
# #패키지 초기화 파일 작성
# %%writefile my_package/__init__.py
# """my_package 초기화 파일"""
# print("my_package가 임포트 되었습니다!")
# 
# # 패키지 정보
# __version__ = "1.0.0"

"""# 새 섹션"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile my_package/math_utils.py
# """수학 유틸리티 함수 모듈"""
# 
# PI = 3.14159
# 
# def add(a, b):
#   """두 수를 더합니다."""
#   return a + b
# 
# def multiply(a, b):
#   """두 수를 곱합니다."""
#   return a * b
# 
# class MathUtility:
#   """수학 유틸리티 클래스"""
# 
#   @staticmethod
#   def square(x):
#     """숫자의 제곱을 반환합니다."""
#     return x * x

# 셀 11: 패키지 사용하기
import my_package
print(my_package.__version__)

# 패키지 내 모듈 가져오기
from my_package import math_utils

# 모듈 사용
print(math_utils.PI)  # 출력: 3.14159
print(math_utils.add(5, 3))  # 출력: 8

# 모듈 내 클래스 사용
print(math_utils.MathUtility.square(4))  # 출력: 16

"""# 새 섹션"""

# datetime 모듈 - 날짜 시간 처리
import datetime

now = datetime.datetime.now()
print(f"현재 시간: {now}")
print(f"형식화된 날짜: {now.strftime('%Y년 %m월 %d일')}")

# 일주일 후 날짜 계산
one_week_later = now + datetime.timedelta(days=7)
print(f"일주일 후:{one_week_later.strftime('%Y년 %m월 %d일')}")

one_month_later = now + datetime.timedelta(days=31)
print(f"한달 후: {one_month_later.strftime('%Y년 %m월 %d일')}")

import random

print(f"0~1 사이 난수: {random.random()}")
print(f"1~100 사이 정수: {random.randint(1, 100)}")

# 리스트에서 랜덤 선택
fruits = ['사과', '바나나', '딸기', '포도', '오렌지']
print(f"랜덤 과일: {random.choice(fruits)}")
print(f"과일 3개 선택: {random.sample(fruits, 3)}")

# 리스트 섞기
random.shuffle(fruits)
print(f"섞인 과일 목록: {fruits}")

import math

print(f"원주율(π): {math.pi}")
print(f"자연상수(e): {math.e}")
print(f"9의 제곱근: {math.sqrt(9)}")
print(f"천장값 ceil(3.2): {math.ceil(3.2)}")
print(f"바닥값 floor(3.8) {math.floor(3.8)}")
print(f"5의 3승: {math.pow(5, 3)}")
print(f"60도의 사인값:{math.sin(math.radians(60))}")

import json

#파이썬 딕셔너리
user = {
    "name": "파파존스",
    "age": "30",
    "is_active": True,
    "skills" : ["Python", "javaScript", "SQL"]
}

# JSON 문자열로 변환(직렬화)
json_str = json.dumps(user, ensure_ascii=False, indent = 2)
print("JSON 문자열:")
print(json_str)

# JSON 문자열을 파이썬 객체로 변환(역질렬화)

parsed_user = json.loads(json_str)
print(f"\n이름:{parsed_user['name']}")
print(f"나이:{parsed_user['age']}")
print(f"스킬:{', '.join(parsed_user['skills'])}")

from collections import Counter, defaultdict, namedtuple

# Counter - 요소 개수 세기
words = ['사과', '바나나', '사과', '딸기', '바나나', '사과']
word_count = Counter(words)
print(f"단어카운터: {word_count}")
print(f"가장 많은 단어: {word_count.most_common(1)}")

#defaultdict - 기본값을 가진 딕셔너리
fruits_colors = defaultdict(list)
fruits_colors['빨강'].append('사과')
fruits_colors['빨강'].append('사과')
fruits_colors['노랑'].append('바나나')
print(f"과일 색상: {dict(fruits_colors)}")

#namedtuple - 이름 있는 필드를 가진 튜플
Person = namedtuple('Person', ['name', 'age', 'job'])
person1 = Person('카카오',"25", '흑인')
print(f"이름: {person1.name}, 나이:{person1.age}, 직업:{person1.job}")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile file_utils.py
# """파일 처리 유틸리티 모듈"""
# 
# def read_file(filename):
#   """파일 내용을 읽어 문자열로 반환합니다."""
#   try:
#     with open(filename, 'r', encoding='utf-8') as f:
#       return f.read()
#   except FileNotFoundError:
#     return f"오류: {filename} 파일을 찾을 수 없습니다."
#   except Exception as e:
#     return f"오류: {str(e)}"
# 
# def write_file(filename, content):
#   """문자열을 파일에 씁니다."""
#   try:
#     with open(filename, 'w', encoding='utf-8') as f:
#       f.write(content)
#       return f"{filename} 파일이 성공적으로 저장되었습니다."
#   except Exception as e:
#     return f"오류: {str(e)}"
# 
# def append_file(filename, content):
#   """문자열을 파일에 추가합니다"""
#   try:
#     with open(filename, 'a', encoding='utf-8') as f:
#       f.write(content)
#       return f"{filename} 파일에 성공적으로 추가되었습니다."
#   except Exception as e:
#       return f"오류{str(e)}"

from file_utils import write_file, read_file, append_file

#파일에 내용 쓰기
result = write_file('sample.txt','안녕하세요!\n 파이썬 모듈 시스템을 배우고 있습니다.')
print(result)

#파일 내용추가
result = append_file('sample.txt', '파일 입출력도 함께 배우고 있어요.\n')
print(result)

# 파일 내용 읽기
content = read_file('sample.txt')
print("\n파일내용:")
print(content)

# Commented out IPython magic to ensure Python compatibility.
# %%writefile advanced_module.py
# """이 모듈은 특수 변수와 속성 탐색을 연습하기 위한 모듈입니다."""
# 
# #공개 항목만 정의
# __all__ = ['add', 'multiply', 'PUBLIC_VALUE']
# 
# #상수
# PUBLIC_VALUE = 100
# _PRIVIT_VALUE = 200 #관례적으로 _ 접두사는 비공개로 간주
# 
# #함수
# def add(a, b):
#   """두 수를 더합니다."""
#   return a + b
# 
# def multiply(a, b):
#   """두 수를 곱합니다."""
#   return a * b
# def _privit_function():
#   """모듈 내에서만 사용하는 함수입니다."""
#   return "이 함수는 내부에서만 사용합니다."
# 
# #모듈 실행 시 호출
# if __name__ == "__main__":
#   print("이 모듈이 직접 실행되었습니다.")
# else:
#   print("이 모듈이 임포트 되었습니다.")

import advanced_module

#모듈 이름
print(f"모듈이름:{advanced_module.__name__}")
#모듈 문서화 문자열
print(f"모듈 문서:{advanced_module.__doc__}")

#모듈 내 속성 목록
print("\n모듈 내 모든 속성:")
for name in dir (advanced_module):
  if not name.startswith('__'):
    print(f"- name")

#비공개 속성에도 접근 가능(하지만 권장하지 않음)
print(f"\n비공개 값:{advanced_module._PRIVIT_VALUE}")
print(f"비공개 함수 호출{advanced_module._privit_function()}")
#함수 독스트링 접근
print(f"\n함수 독스트링{advanced_module.add.__doc__}")

#from 모듈 import * 사용시 __all__ 영향 확인
from advanced_module import *

print(f"PUBLIC_VALUE: {PUBLIC_VALUE}")
print(f"add(3, 4):{add(3, 4)}")
print(f"multiply(5, 6):{multiply(5, 6)}")

#이건 오류 발생 - __all_에 포함되지 않음
# pritn(_PRIVIT_VALUE) # NameError: name '_PRIVIT_VALUE' is not defined

# Commented out IPython magic to ensure Python compatibility.
# %%writefile data_analysis.py
# """데이터 분석 유틸리티 모듈"""
# 
# def calculate_mean(numbers):
#   """리스트의 평균을 계산합니다."""
#   if not numbers:
#     return None
#   return sum(numbers) / len(numbers)
# 
# def calculate_median(numbers):
#   """리스트의 중앙값을 계산합니다."""
#   if not numbers:
#     return None
#   sorted_numbers = sorted(numbers)
#   n = len(sorted_numbers)
#   if n % 2 == 0:
#     return(sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2
#   else:
#     return sorted_numbers[n//2]
# 
# def calculate_variance(numbers):
#   """리스트의 분산을 계산합니다."""
#   if not numbers or len(numbers) < 2:
#     return None
#   mean = calculate_mean(numbers)
#   return sum((x - mean) ** 2 for x in numbers) / len(numbers)
# 
# def calculate_std_deviation(numbers):
#     """리스트의 표준편차를 계산합니다."""
#     variance = calculate_variance(numbers)
#     if variance is None:
#         return None
#     return variance ** 0.5
# 
# class DataAnalyzer:
# 
#   """데이터 분석을 위한 클래스"""
#   def __init__(self, data):
#     self.data = data or []
# 
#   def load_data(self,data):
#     """데이터를 로드합니다."""
#     self.data = data
# 
#   def get_summary(self):
#     """데이터 요약 통계를 반환합니다."""
#     if not self.data:
#       return "데이터가 없습니다."
# 
#     return {
#         "개수":len(self.data),
#         "합계":sum(self.data),
#         "평균":calculate_mean(self.data),
#         "중앙값":calculate_median(self.data),
#         "최소값":min(self.data),
#         "최대값":max(self.data),
#         "표준편차":calculate_std_deviation(self.data)
#     }
# 
#   def filter_data(self, condition_func):
#     """조건에 맞는 데이터만 필터링 합니다."""
#     return [item for item in self.data if condition_func(item)]

from data_analysis import DataAnalyzer, calculate_mean, calculate_median

#데이터 분석 클래스 사용
data = [12, 45, 33, 27, 89, 45, 18, 62, 39, 51]
analayzer = DataAnalyzer(data)

#데이터 요약 통계
summary = analayzer.get_summary()
print("데이터 요약:")
for key, value in summary.items():
  print(f"- {key}: {value}")

#개별 함수 사용
print(f"\n평균:{calculate_mean(data)}")
print(f"중앙값:{calculate_median(data)}")

#데이터 필터링
filtered_data = analayzer.filter_data(lambda x: x > 40)
print(f"\n40보다 큰 값: {filtered_data}")
print(f"필터링된 데이터의 평균: {calculate_mean(filtered_data)}")